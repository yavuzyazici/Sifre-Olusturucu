@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model SifreOlusturucu.Models.Password

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rastgele Parola Oluşturucu</title>
    <link rel="stylesheet" href="~/css/styles.css">
</head>
<body>
    <header>
        <h1>Rastgele Parola Oluşturucu</h1>
    </header>
    <div class="container">
        <p>Çevrimiçi hesaplarınızı güvende tutmak için güçlü ve güvenli parolalar oluşturun.</p>
        <form method="post" asp-action="GeneratePassword" asp-controller="Home" id="passwordForm">
            <div class="form-group">
                <label for="length">Parola uzunluğu: <span id="lengthValue">19</span></label>
                <div class="range-container">
                    <button type="button" class="range-button" onclick="updateLength(-1)">-</button>
                    <input asp-for="Length" type="range" id="length" min="1" max="50" value="16" oninput="updateLengthValue(this.value)">
                    <button type="button" class="range-button" onclick="updateLength(1)">+</button>
                </div>
            </div>
            <div class="form-group">
                <label><input asp-for="useUpper" type="checkbox" onchange="updatePassword()"> Büyük harfler (ABC)</label>
            </div>
            <div class="form-group">
                <label><input asp-for="useLower" type="checkbox" onchange="updatePassword()"> Küçük harfler (abc)</label>
            </div>
            <div class="form-group">
                <label><input asp-for="useNumber" type="checkbox" onchange="updatePassword()"> Rakamlar (123)</label>
            </div>
            <div class="form-group">
                <label><input asp-for="useSpecial" type="checkbox" onchange="updatePassword()"> Özel karakterler (#$&)</label>
            </div>
        </form>
        <div class="result">
            <h2>Oluşturulan Şifre</h2>
            <div class="password-display">
                <input type="text" id="generated-password" readonly>
                <button type="button" onclick="copyPassword()" class="copy-button">Kopyala</button>
            </div>
            <div class="password-strength-wrapper">
                <div id="password-strength" class="password-strength"></div>
            </div>
            <span id="security-score"></span>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            const lengthInput = document.getElementById('length');
            const generatedPasswordInput = document.getElementById('generated-password');

            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const checkedCheckboxes = Array.from(checkboxes).filter(cb => cb.checked);
                    if (checkedCheckboxes.length === 0) {
                        this.checked = true;
                    }
                    updatePassword();
                });
            });

            lengthInput.addEventListener('input', function () {
                document.getElementById('lengthValue').innerText = this.value;
                updatePassword();
            });

            window.updateLength = function (change) {
                const currentValue = parseInt(lengthInput.value);
                const newValue = currentValue + change;
                if (newValue >= parseInt(lengthInput.min) && newValue <= parseInt(lengthInput.max)) {
                    lengthInput.value = newValue;
                    document.getElementById('lengthValue').innerText = newValue;
                    updatePassword();
                }
            }

            window.updatePassword = function () {
                const form = document.getElementById('passwordForm');
                const formData = new FormData(form);

                fetch('@Url.Action("GeneratePassword", "Home")', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        generatedPasswordInput.value = data.generatedPassword;
                        document.getElementById('security-score').innerText = data.securityScore;
                        updateStrengthBar(data.securityScore);
                    })
                    .catch(error => console.error('Error:', error));
            }

            function updateStrengthBar(score) {
                const strengthBar = document.getElementById('password-strength');
                strengthBar.style.width = `${score * 20}%`;
                if (score < 3) {
                    strengthBar.style.backgroundColor = 'red';
                } else if (score < 4) {
                    strengthBar.style.backgroundColor = 'orange';
                } else {
                    strengthBar.style.backgroundColor = 'green';
                }
            }

            // Initial password generation
            updatePassword();
        });

        function copyPassword() {
            var copyText = document.getElementById("generated-password");
            copyText.select();
            copyText.setSelectionRange(0, 99999);
            document.execCommand("copy");
            alert("Parola kopyalandı: " + copyText.value);
        }

        function updateLengthValue(value) {
            document.getElementById('lengthValue').innerText = value;
            updatePassword();
        }
    </script>
</body>
</html>
